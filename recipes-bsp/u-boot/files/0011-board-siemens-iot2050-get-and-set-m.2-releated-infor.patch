From 7ff6655d0068cebe78aa3051ae0b0113c4d973b5 Mon Sep 17 00:00:00 2001
From: chao zeng <chao.zeng@siemens.com>
Date: Fri, 7 Jan 2022 16:35:43 +0800
Subject: [PATCH 11/17] board:siemens:iot2050:get and set m.2 releated
 information

Get the M.2 configuration,enable the power of the m.2
Set the releated overlay according to the M.2 configuration

Signed-off-by: chao zeng <chao.zeng@siemens.com>
---
 board/siemens/iot2050/board.c | 168 +++++++++++++++++++++++++++++++++-
 1 file changed, 166 insertions(+), 2 deletions(-)

diff --git a/board/siemens/iot2050/board.c b/board/siemens/iot2050/board.c
index 817fbf4ecb..41f05085a9 100644
--- a/board/siemens/iot2050/board.c
+++ b/board/siemens/iot2050/board.c
@@ -47,6 +47,158 @@ struct iot2050_info {
 
 DECLARE_GLOBAL_DATA_PTR;
 
+#define M2_CONFIG_LEN    4
+#define PCIE_MUX_CONTROL 3
+#define SERDES_SELECT    2
+#define M2_B_KEY 0
+
+typedef struct gpio_config {
+	char *label;
+	char *gpio_name;
+}gpioConfig_t;
+
+typedef enum lane0_config{
+	USB30 = 0,
+	PCIE0_LANE0,
+}lane0_config_e;
+
+typedef enum lane1_config{
+	PCIE1_LANE0 = 0,
+	PCIE0_LANE1,
+}lane1_config_e;
+
+typedef struct serdes_config {
+	lane0_config_e  lane0_sel;
+	lane1_config_e  lane1_sel;
+}serdes_config_t;
+
+typedef struct key_config {
+	int key_type;    
+	int m2config[M2_CONFIG_LEN];
+	int m2_pinmux_value[PCIE_MUX_CONTROL];
+	serdes_config_t serdes_config;
+}__packed key_config_t;
+
+
+static key_config_t config_table[] = {
+	{M2_B_KEY, {0,1,0,0}, {0,0,1}, {PCIE0_LANE0, PCIE0_LANE1}},
+	{M2_B_KEY, {0,0,1,0}, {0,1,0}, {PCIE0_LANE0, PCIE1_LANE0}},
+	{M2_B_KEY, {0,1,1,0}, {0,1,0}, {PCIE0_LANE0, PCIE1_LANE0}},
+	{M2_B_KEY, {1,0,0,1}, {0,1,0}, {PCIE0_LANE0, PCIE1_LANE0}},
+	{M2_B_KEY, {1,1,0,1}, {0,1,0}, {PCIE0_LANE0, PCIE1_LANE0}},
+	{M2_B_KEY, {0,0,0,1}, {1,1,0}, {USB30, PCIE1_LANE0}},
+	{M2_B_KEY, {0,1,0,1}, {1,1,0}, {USB30, PCIE1_LANE0}},
+	{M2_B_KEY, {0,0,1,1}, {1,1,0}, {USB30, PCIE1_LANE0}},
+	{M2_B_KEY, {1,0,1,1}, {1,1,0}, {USB30, PCIE1_LANE0}},
+};
+
+static gpioConfig_t m2_pinmux_config[PCIE_MUX_CONTROL] = {
+	{"SEL_USB30_PCIE0_LANE0", "gpio@600000_88"},
+	{"SEL_PCIE1_PCIE0",       "gpio@600000_82"},
+	{"SEL_USB30_PCIE0_LANE1", "gpio@600000_89"},
+};
+
+static gpioConfig_t m2_key_config[M2_CONFIG_LEN] = {
+	{"KEY_CONFIG_0", "gpio@601000_18"},
+	{"KEY_CONFIG_1", "gpio@601000_19"},
+	{"KEY_CONFIG_2", "gpio@601000_88"},
+	{"KEY_CONFIG_3", "gpio@601000_89"},
+};
+
+static gpioConfig_t m2_enable_power = {"P3V3_M2_EN", "gpio@601000_17"};
+
+static int get_pinvalue(const char *gpio_name,const char *label)
+{
+	struct gpio_desc gpio;
+
+	if (dm_gpio_lookup_name(gpio_name, &gpio) < 0 ||
+	dm_gpio_request(&gpio, label) < 0 ||
+	dm_gpio_set_dir_flags(&gpio, GPIOD_IS_IN) < 0)
+		return false;
+
+	return dm_gpio_get_value(&gpio);
+}
+
+static void set_pinvalue(const char *gpio_name,const char *label,int value)
+{
+	struct gpio_desc gpio;
+
+	if (dm_gpio_lookup_name(gpio_name, &gpio) < 0 ||
+	dm_gpio_request(&gpio, label) < 0 ||
+	dm_gpio_set_dir_flags(&gpio, GPIOD_IS_OUT) < 0) {
+		pr_err("IOT2050:Can not set the pin value\n");
+		return ;
+	}
+	dm_gpio_set_value(&gpio,value);
+}
+
+static int *get_m2_config(void)
+{
+	int i;
+	static int result[M2_CONFIG_LEN] = {0};
+	for(i=0; i < M2_CONFIG_LEN; i++)
+	{
+		result[i] = get_pinvalue(m2_key_config[i].gpio_name, m2_key_config[i].label);
+	}
+	return result;
+}
+
+static serdes_config_t get_serdes_config_set_m2_pinmux(void)
+{
+	int i,j;
+	serdes_config_t serdes_config = {USB30, PCIE1_LANE0};//default
+	int config_table_size= sizeof(config_table)/sizeof(config_table[0]);
+
+    //1.TBD:check eeprom or flash
+    //2.configure the m2
+	int *config = get_m2_config();
+	printf("M2-KEY PIN:");
+	for(i=0; i < M2_CONFIG_LEN;i++)
+	{
+		printf("%d",*(config+i));
+	}
+	printf("\n");
+
+	for(i = 0; i < config_table_size; i++)
+	{
+		if(!memcmp(config, config_table[i].m2config, M2_CONFIG_LEN * sizeof(int)))
+		{
+			// set m2 pinmux
+			for(j = 0; j < PCIE_MUX_CONTROL; j++)
+				set_pinvalue(m2_pinmux_config[j].gpio_name, m2_pinmux_config[j].label, config_table[i].m2_pinmux_value[j]);
+			//get serdes config info
+			serdes_config =  config_table[i].serdes_config;
+			break;
+		}
+	}
+
+	return serdes_config;
+}
+
+static void configure_serdes_by_overlays(void)
+{
+	struct iot2050_info *info = IOT2050_INFO_DATA;
+	serdes_config_t serdes_conf;
+    /*IOT2050 M2 Variant*/
+	if(strcmp(info->name, "IOT2050-ADVANCED-M2") == 0) {
+		//Enable Power of E-key and B-key connector
+		set_pinvalue(m2_enable_power.gpio_name, m2_enable_power.label, 1);
+        serdes_conf = get_serdes_config_set_m2_pinmux();
+		if (serdes_conf.lane0_sel == PCIE0_LANE0 && serdes_conf.lane1_sel == PCIE0_LANE1)
+			env_set("name_overlays", "ti/k3-am654-iot2050-bkey-pciex2.dtbo");
+		else if (serdes_conf.lane0_sel == USB30 && serdes_conf.lane1_sel == PCIE0_LANE1)
+			env_set("name_overlays", "ti/k3-am654-iot2050-bkey-usb3-ekey-pcie.dtbo");
+		else if (serdes_conf.lane0_sel == PCIE0_LANE0 && serdes_conf.lane1_sel == PCIE1_LANE0)
+			env_set("name_overlays", "ti/k3-am654-iot2050-bkey-pcie-ekey-pcie.dtbo");
+		else 
+			env_set("name_overlays", "ti/k3-am654-iot2050-bkey-usb3-ekey-pcie.dtbo");
+
+		env_save();
+        printf("serdes0: %d serdes1 %d \n",serdes_conf.lane0_sel,serdes_conf.lane1_sel);
+	}
+}
+
+
 static bool board_is_advanced(void)
 {
 	struct iot2050_info *info = IOT2050_INFO_DATA;
@@ -60,7 +212,16 @@ static bool board_is_sr1(void)
 	struct iot2050_info *info = IOT2050_INFO_DATA;
 
 	return info->magic == IOT2050_INFO_MAGIC &&
-		!strstr((char *)info->name, "-PG2");
+		!strstr((char *)info->name, "-PG2") &&
+		!strstr((char *)info->name, "-M2");
+}
+
+static bool board_is_m2(void)
+{
+	struct iot2050_info *info = IOT2050_INFO_DATA;
+
+	return info->magic == IOT2050_INFO_MAGIC &&
+		strstr((char *)info->name, "-M2") != NULL;
 }
 
 static void remove_mmc1_target(void)
@@ -111,6 +272,8 @@ void set_board_info_env(void)
 	if (board_is_advanced()) {
 		if (board_is_sr1())
 			fdtfile = "ti/k3-am6548-iot2050-advanced.dtb";
+		else if (board_is_m2())
+			fdtfile = "ti/k3-am6548-iot2050-advanced-m2.dtb";
 		else
 			fdtfile = "ti/k3-am6548-iot2050-advanced-pg2.dtb";
 	} else {
@@ -221,7 +384,8 @@ int board_late_init(void)
 	writel(0x3, SERDES0_LANE_SELECT);
 
 	set_board_info_env();
-
+	if(board_is_m2())
+		configure_serdes_by_overlays();
 	/* remove the eMMC if requested via button */
 	if (IS_ENABLED(CONFIG_IOT2050_BOOT_SWITCH) && board_is_advanced() &&
 	    user_button_pressed())
-- 
2.34.1

